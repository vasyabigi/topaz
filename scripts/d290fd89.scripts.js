"use strict";angular.module("topazApp",["parse-angular","doowb.angular-pusher","ui.router","ui.sortable"]).config(["PusherServiceProvider",function(a){var b;return Parse.initialize("fTTyy0H38pgtBgPNLvDZKOrvarGwe7DcLVFfYFdF","IAsbU53QGranXVVMEfmT5AmArDaCRAu15xBmNyil"),b=$.Deferred(),window.fbPromise=b.promise(),window.fbAsyncInit=function(){return b.resolve()},a.setToken("83915278656e66d15149").setOptions({}),window.fbPromise.then(function(){return Parse.FacebookUtils.init({appId:0x4e3303be0e24b,status:!0,cookie:!0,xfbml:!0,frictionlessRequests:!0})})}]).run(["$rootScope","User",function(a,b){return a.user=b.current(),a.login=function(){return b.login().then(function(b){return a.user=b})},a.logout=function(){return b.logout(),a.user=b.current()}}]),angular.module("topazApp").config(["$stateProvider","$urlRouterProvider",function(a,b){return b.otherwise("/app/main"),a.state("app",{url:"/app","abstract":!0,templateUrl:"views/base.html",controller:"MainCtrl"}).state("app.main",{url:"/main",templateUrl:"views/main.html"}).state("app.details",{url:"/question/:id",templateUrl:"views/question-details.html",controller:"QuestionDetailsCtrl",resolve:{currentQuestion:function(a,b){var c;return c=new Parse.Query(a.model),c.get(b.id)}}}).state("app.create",{url:"/create",templateUrl:"views/question-create.html",controller:"QuestionCreateCtrl"}).state("app.results",{url:"/question/:id/results",templateUrl:"views/question-results.html"})}]).run(["$rootScope","$state","User",function(a,b,c){var d;return d=["app.main"],a.$on("$stateChangeStart",function(a,e){return c.isAuth()||_.contains(d,e.name)?void 0:(console.warn("Login first!!!"),a.preventDefault(),b.go("app.main"))})}]),angular.module("topazApp").controller("MainCtrl",["$scope","$state","User","Question","Choice",function(a,b,c,d){return a.question={},a.questions=new d.collection,a.questions.query().limit(5).find().then(function(b){return _.each(b,function(b){return a.questions.add(b)})}),a.createQuestion=function(d){return d.submitted=!1,d.$valid?(a.question.user=c.current(),a.questions.addQuestion(a.question).then(function(c){return a.question={},b.go("app.details",{id:c.id})})):d.submitted=!0}}]),angular.module("topazApp").controller("QuestionDetailsCtrl",["$scope","$state","currentQuestion","Choice",function(a,b,c,d){return a.question=c,a.choices=new d.collection,a.choices.forQuestion(c),a.votes=[],a.sortableOptions={placeholder:"choice-item placeholder",connectWith:".choices-container",revert:100}}]),angular.module("topazApp").factory("User",["$q",function(a){return{login:function(){var b;return b=a.defer(),Parse.FacebookUtils.logIn("email",{success:function(a){return a.existed()?(console.log("User logged in through Facebook!"),b.resolve(a)):(console.log("User signed up and logged in through Facebook!"),FB.api("/me",{fields:"id,name,email,username,link"},function(c){return a.save({facebookId:c.id,name:c.name,username:c.username,email:c.email,link:c.link}).then(function(){return b.resolve(a)})}))},error:function(a,c){return b.reject(c)}}),b.promise},logout:function(){return Parse.User.logOut()},current:function(){return Parse.User.current()},isAuth:function(){return Boolean(Parse.User.current())}}}]),angular.module("topazApp").factory("Question",["$q",function(a){var b,c;return b=Parse.Object.extend({className:"Question",getTitle:function(){return this.get("title")}}),c=Parse.Collection.extend({model:b,comparator:function(a){return-a.createdAt.getTime()},query:function(){return new Parse.Query("Question").descending("createdAt")},addQuestion:function(c){var d,e,f=this;return d=a.defer(),e=new b,e.save(c).then(function(a){return f.add(a),d.resolve(a)},function(a){return d.reject(a)}),d.promise},removeQuestion:function(a){var b=this;return this.get(a)?a.destroy().then(function(){return b.remove(a)}):!1}}),{model:b,collection:c}}]),angular.module("topazApp").factory("Choice",["$q",function(){var a,b;return a=Parse.Object.extend({className:"Choice",getUser:function(){return this.get("user")},getQuestion:function(){return this.get("question")}}),b=Parse.Collection.extend({model:a,comparator:function(a){return-a.createdAt.getTime()},query:function(){return new Parse.Query("Choice")},forQuestion:function(a){var b=this;return this.query().equalTo("question",a).include(["user"]).find().then(function(a){return _.each(a,function(a){return b.add(a)})})}}),{model:a,collection:b}}]);